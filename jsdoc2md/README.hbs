# hyperpeer-js
hyperpeer-js is the javascript module for implementing browser peers in applications based on Hyperpeer.
This module provides a single class called [`Hyperpeer`](#Hyperpeer) which manages both the connection 
with the signaling server and the peer-to-peer communication via WebRTC with remote peers.

# Features

* Simple node.js style API.
* Based on the popular modules [simple-peer](https://github.com/feross/simple-peer/), [ws](https://github.com/websockets/ws), 
and [EventEmitter2](https://www.npmjs.com/package/eventemitter2).
* Works in the browser with [browserify](http://browserify.org/).

# Example
```js
const Hyperpeer = require('hyperpeer')
const serverAddress = 'ws://localhost:8080'

// The <video> element to use for showing remote media
const video = document.getElementById('video')

// Get local media media (video and audio)
navigator.mediaDevices.getUserMedia({ video: true, audio: true })
.then((stream) => {
    // Instantiate Hyperpeer with an id, a type, the input media stream and the output <video> element
    const hp = new Hyperpeer(serverAddress, { 
        id: 'myId', 
        type: 'type1',
        stream: stream,
        videoElement: video
    })

    // Once get the 'online' event get the available peers
    hp.on('online', () => {
        hp.getPeers()
        .then((peers) => {
            // If there is more than one peer, connect to the first that is not me
            if (peers.length > 1) {
                const remotePeerId = peers[0].id != 'myId' ? peers[0].id : peers[1].id
                return hp.connectTo(remotePeerId)
            } else {
                // Otherwise listen for an incoming connection and accept it when it arrives
                hp.on('connection', hp.acceptConnection);
                return hp.listenConnections()
            }
        })
        .catch((error) => { alert(error) })
    })

    // Once connected say 'hi'
    hp.on('connect', () => {
        console.log('Peer-to-peer connection established!')
        hp.send('hi')
    })

    // On data print print whatever the remote peer says
    hp.on('data', (data) => {
        console.log('Remote peer says: ' + data)
    })

    hp.on('error', (error) => {
        alert('Hyperpeer Error: ' + error)
    })
})
.catch((error) => {
    alert('mediaDevices error: ' + error)
})

 ```

# API Reference

{{>main}}